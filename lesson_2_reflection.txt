What happens when you initialize a repository? Why do you need to do it?

  It creates a .git folder, which is hidden in windows, that marks this
  directory as a repository. You need to do this because you can't just check
  random files into git, it also has a history of changes which is downloaded
  with it. This prepares your directory to be something that can be checked in.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  the staging area is a subset of the working directory that you intend to
  commit from the repository. This allows you to exactly control what you want
  to add, in case there is something in your directory you don't want to add.
  running git status shows you what changes  you are adding.

How can you use the staging area to make sure you have one commit per logical
change?

  You can add the files that are relevant to the change using git add to the
  staging area. To make sure this is correct, you run "git diff" with no
  arguments to make sure every change reflected there is part of your one
  logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  Where there are several unrelated changes being done to code, branches keep
  them organized and keep unfinished changes impacting other branches.

How do the diagrams help you visualize the branch structure?

  These diagrams list which checkouts belong in each branch, as well as the
  master branch. they also identify the "detached head" problem of attaching
  another commit to an unlabeled branch (random check in)

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  the result is that the changes in the branch we are merging (in this case coins)
  get put into the branch we are in now (master). the git log of changes also is
  merged based on time, but after this comparing two id's using diff makes
  strange results. use git show instead to make it compare one id to it's actual
  parent change. the branch label gets updated to the result of the merge as well.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

  Simple changes are handled by git correctly, but there is a risk of bugs in
  case function names are over-written without both programmers noticing or other
  conflicting changes. It is much faster than merging manually. Git also
  provides a way to resolve conflicts by listing your version, the common version,
  and then the other branch version in separate sections.
